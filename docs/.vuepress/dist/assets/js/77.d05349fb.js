(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{468:function(e,t,s){"use strict";s.r(t);var n=s(56),a=Object(n.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("center",[s("h1",[e._v("光影属性文件")]),s("p",[e._v("shaders.properties")])]),e._v(" "),s("p",[e._v("能力所限，无翻译，如有能力科学上网，请直接阅读原文")]),e._v(" "),s("p",[e._v("https://github.com/sp614x/optifine/blob/master/OptiFineDoc/doc/shaders.properties")]),e._v(" "),s("div",{staticClass:"language-properties extra-class"},[s("pre",{pre:!0,attrs:{class:"language-properties"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("###############################################################################")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Sample configuration for OptiFine's Shaders feature.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("###############################################################################")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# shaders.properties")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("###############################################################################")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# Place this file in the "shaders" folder of the shader pack')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This file can use conditional preprocessor directives (#ifdef, #if, etc.)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# For more details see "shaders.txt", section "Standard Macros" A to I.')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The settings version, oldLighting, separateAo, sliders, profiles and screen are parsed without option macros.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Set clouds type or turn clouds off")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# The clouds are also controlled by "Video Settings -> Details -> Clouds" with higher priority')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("clouds")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("fast|fancy|off")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Enable or disable old hand light ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Backwards compatibility for shader packs not supporting main and off hand.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# When enabled uses the handheld item with higher light value for the main hand.  ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# The old hand light is also controlled by "Video Settings -> Shaders -> Old Hand Light" with higher priority')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("oldHandLight")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("true|false")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# Enable or disable the dynamic hand light from "Dynamic Lights"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# This option can be used to disable the dynamic hand light from "Dynamic Lights" if the shader implements its own hand light.')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("dynamicHandLight")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("true|false")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Enable or disable old block lighting with fixed multiplier")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# The old block lighting is also controlled by "Video Settings -> Shaders -> Old Lighting" with higher priority')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("oldLighting")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("true|false")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Enable or disable rendering of terrain (solid, cutout, cutout_mipped) in the shadow pass")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("shadowTerrain")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("true|false")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Enable or disable rendering of translucent blocks (water, stained glass) in the shadow pass")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("shadowTranslucent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("true|false")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Enable or disable rendering of entities in the shadow pass")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("shadowEntities")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("true|false")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Enable or disable rendering of block entities in the shadow pass")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("shadowBlockEntities")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("true|false")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Enable or disable underwater screen overlay")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("underwaterOverlay")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("true|false")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Enable or disable sun rendering")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("sun")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("true|false")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Enable or disable moon rendering")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("moon")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("true|false")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Enable or disable vignette rendering")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("vignette")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("true|false")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Enable back-face rendering per render layer")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Default is false")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("backFace.solid")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("true|false ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("backFace.cutout")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("true|false")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("backFace.cutoutMipped")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("true|false")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("backFace.translucent")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("true|false")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Rain depth")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Enables rain and snow to write to the depth buffer")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("rain.depth")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("true|false")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Beacon beam depth")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Enables beacon beam to write to the depth buffer")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("beacon.beam.depth")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("true|false")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Separate AO")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# When enabled the AO brightness (smooth lighting) is separated from "color.rbg" and put in "color.a". ')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("separateAo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("true|false")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Frustum culling")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Enable or disable frustum culling")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("frustum.culling")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("true|false")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Shadow culling")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Enable or disable shadow culling")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("shadow.culling")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("true|false")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Particles before deferred")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Render particles before deferred programs")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("particles.before.deferred")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("true|false")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# OptiFine version")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The minimum OptiFine version which is required by the shader pack")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Each Minecraft version has to be specified separately.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# For example:")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   version.1.12.2=D1")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   version.1.10.2=F1")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   version.1.8=J1")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("version.<mc_ver>")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("<of_edition>")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Custom textures")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Allows custom textures to be bound to the available shader units.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Format:")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  texture.<stage>.<name>=<path>")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Stage:")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  gbuffers - gbuffers and shadow programs")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  deferred - deferred programs")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  composite - composite and final programs")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# Name is the texture unit name, see "shaders.txt" for the available names.')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The textures can be loaded from different places:")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 1. Shader pack ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#   The texture path is relative to the folder "shaders".')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   Example:")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#     texture.composite.colortex1=textures/noise.png")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 2. Resource pack")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#   The texture path should start with "minecraft:"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   Example")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#     texture.composite.colortex2=minecraft:textures/font/ascii.png")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 3. Dynamic (lightmap, texture atlas)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   Example")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#     texture.composite.colortex3=minecraft:dynamic/lightmap_1")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#     texture.composite.colortex4=minecraft:textures/atlas/blocks.png")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# The suffix "_n" and "_s" can be used to load the normal/specular variant of the texture,')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# for example "minecraft:textures/atlas/blocks_n.png"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Raw textures (binary dump) can also be loaded:")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   texture.<stage>.<name>=<path> <type> <internalFormat> <dimensions> <pixelFormat> <pixelType>")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Where:")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   <type> is one of: TEXTURE_1D, TEXTURE_2D, TEXTURE_3D, TEXTURE_RECTANGLE")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#   <internalFormat> is the texture format, see Texture Formats in "shaders.txt" for the available names')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   <dimensions> is a list of texture dimensions, depends on the texture type")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#   <pixelFormat> is the pixel format, see Pixel Formats in "shaders.txt" for the available names')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#   <pixelType> is the pixel type, see Pixel Types in "shaders.txt" for the available names')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# For example: ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   texture.composite.gaux1=textures/lut_1d.dat TEXTURE_1D RGBA32F 256 RGBA FLOAT")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   texture.composite.gaux1.2=textures/lut_3d.dat TEXTURE_3D RGBA32F 64 64 64 RGBA FLOAT")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# It is possible to bind several textures with different types to one texture unit.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The shaders can differentiate between them based on the sampler type: sampler1d, sampler2d, sampler3d ...")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# In one program only one sampler type can be used per texture unit.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# The suffixes ".0" to ".9" can be added to <name> to avoid duplicate property keys.')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# Wrap and filter modes can be configured by adding standard texture ".mcmeta" files, ')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# for example: "textures/lut_3d.dat.mcmeta"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("texture.<stage>.<name>")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("<path>")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Custom noise texture")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Allows the noise texture to be loaded from the shader pack")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("texture.noise")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("<path>")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# Shader options are parsed from the ".fsh" and ".vsh" files located in the folder "shaders".')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The line comment located after the option is shown as a tooltip.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# Tooltip lines are split on sentence end ". ".')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# Tooltip lines ending with "!" are automatically shown red.')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# One option can be present in several shader files and it will be switched simultaneously in all of them.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Ambiguous options (different default values found) are disabled and can not be changed.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Left click on an option button selects the next value, right click selects the previous value and ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Shift + click resets the option to default value.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Boolean, default ON")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   #define SSAO       // Screen space ambient occlusion. High performance impact.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Boolean, default OFF")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   // #define SSAO    // Screen space ambient occlusion. High performance impact.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# The boolean variables are recognized only if the matching "#ifdef" or "#ifndef" is also found in the same file. ')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Variable")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   #define SHADOW_DARKNESS 0.10   // Shadow darkness levels [0.05 0.10 0.20]")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# The allowed values are given as a list "[v1 v2 v3]" in the comment.')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The default value is automatically added if not present in the list.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# Some "const" variables are also recognized (backwards compatibility with the Shaders Mod).')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# They use a structure similar to the macro variables, for example: ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   const int shadowMapResolution = 1572; // Shadowmap resolution [1024 1572 2048]")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   const float shadowDistance = 64.0;    // Draw distance of shadows [32.0 64.0 128.0 256.0]")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Const variables without allowed values are by default not visible, unless used in a profile or configured on a screen.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# The recognized "const" variables are:')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   shadowMapResolution")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   shadowDistance")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   shadowDistanceRenderMul")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   shadowIntervalSize")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   generateShadowMipmap")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   generateShadowColorMipmap")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   shadowHardwareFiltering")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   shadowHardwareFiltering0")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   shadowHardwareFiltering1")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   shadowtex0Mipmap")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   shadowtexMipmap")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   shadowtex1Mipmap")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   shadowcolor0Mipmap")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   shadowColor0Mipmap")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   shadowcolor1Mipmap")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   shadowColor1Mipmap")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   shadowtex0Nearest")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   shadowtexNearest")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   shadow0MinMagNearest")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   shadowtex1Nearest")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   shadow1MinMagNearest")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   shadowcolor0Nearest")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   shadowColor0Nearest")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   shadowColor0MinMagNearest")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   shadowcolor1Nearest")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   shadowColor1Nearest")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   shadowColor1MinMagNearest")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   wetnessHalflife")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   drynessHalflife")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   eyeBrightnessHalflife")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   centerDepthHalflife")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   sunPathRotation")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   ambientOcclusionLevel")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   superSamplingLevel")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   noiseTextureResolution")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# User friendly option labels can be loaded from language files in "/shaders/lang"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# Example from "/shaders/lang/en_us.lang":')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   option.SHADOW_FILTER=Shadow Filter")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   option.SHADOW_FILTER.comment=Smooth out edges of shadows. Very small performance hit.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# User friendly value labels can be loaded from language files in "/shaders/lang"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# Example from "/shaders/lang/en_us.lang"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   value.SHADOW_FILTER.0.4f=Normal")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   value.SHADOW_FILTER.0.9f=Soft")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Value formatting can be added with:")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   prefix.SHADOW_FILTER=(")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   suffix.SHADOW_FILTER=)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# Profile tooltips can be loaded from language files in "/shaders/lang"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# Example from "/shaders/lang/en_us.lang":')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   profile.comment=Low - low. Medium - medium. Standard - standard. High - high. Ultra - ultra.")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Sliders")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Options with multiple allowed values can be shown as sliders")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("sliders")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("<list of options>")]),e._v("\n \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Profiles allow a set of options to be switched together")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The current profile is detected based on the selected option values")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# If no profile matches the current option values, the profile "Custom" is selected')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# It is recommended that all profiles use the same list of options and only the values differ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Disabled programs are special options and only disabling (prefix !) is recognized for them ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("profile.NAME")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("<list of options>")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Profile options")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   OPTION:value  - set value")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   OPTION=value  - set value")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   OPTION        - set boolean option ON")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   !OPTION       - set boolean option OFF")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   profile.NAME  - copy all options from another profile")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#   !program.name - disable program "name". The program name may include dimension: "world-1/gbuffers_water"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The following program names are recognized:")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   gbuffers_basic")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   gbuffers_textured")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   gbuffers_textured_lit")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   gbuffers_skybasic")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   gbuffers_skytextured")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   gbuffers_clouds")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   gbuffers_terrain")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   gbuffers_terrain_solid")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   gbuffers_terrain_cutout_mip")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   gbuffers_terrain_cutout")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   gbuffers_damagedblock")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   gbuffers_water")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   gbuffers_block")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   gbuffers_beaconbeam")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   gbuffers_item")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   gbuffers_entities")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   gbuffers_armor_glint")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   gbuffers_spidereyes")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   gbuffers_hand")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   gbuffers_weather")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   composite")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   composite1")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   composite2")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   composite3")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   composite4")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   composite5")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   composite6")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   composite7")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   final")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   shadow")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   shadow_solid")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   shadow_cutout")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   deferred")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   deferred1")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   deferred2")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   deferred3")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   deferred4")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   deferred5")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   deferred6")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   deferred7")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   gbuffers_hand_water")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Examples")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# profile.LOW=SSAO:false GOD_RAYS:false SHADOW_DIST:40 !program.composite1")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# profile.MED=profile.LOW GOD_RAYS SHADOW_DIST:80")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# profile.HIGH=SSAO GOD_RAYS SHADOW_DIST:120 ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# User friendly profile labels can be loaded from language files in "/shaders/lang"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# Example from "/shaders/lang/en_us.lang"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# profile.LOW=Low")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# profile.LOW.comment=Low quality. Intel and Mac compatible. No God Rays and SSAO.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# profile.MED=Medium")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# profile.MED.comment=Medium quality. Nvidia or AMD graphics card recommended.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# profile.HIGH=High")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# profile.HIGH.comment=High quality. Modern Nvidia or AMD graphics card required.")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Option screen configuration")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Main screen")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("screen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("<list of options>")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Sub-screen")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("screen.NAME")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("<list of options>")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Screen options")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   OPTION    - option name")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   [NAME]    - link to sub-screen NAME")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   <profile> - profile selection")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   <empty>   - empty slot")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   *         - the rest of the options not configured on any of the screens")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Option columns per screen")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# By default the options are shown in two columns:")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   1  2")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   3  4")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   5  6")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   ...")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# When more than 18 options are present the screen switches to 3 or more columns.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The option names are automatically shortened to avoid text overflow outside the button.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Main screen")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("screen.columns")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("2")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Sub-screen")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("screen.NAME.columns")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("2")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Example:")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# screen=<profile> <empty> BLOOM CELLSHADING [SUN_EFFECTS] [WAVING_GRASS]")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# screen.SUN_EFFECTS=SUN_EFFECTS GOD_RAYS LENS_FLARE RAINDROPS")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# screen.WAVING_GRASS=WAVING_GRASS WAVING_LEAVES WAVING_VINES")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# screen.MISC=*")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# User friendly screen labels can be loaded from language files in "/shaders/lang"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# Example from "/shaders/lang/en_us.lang"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# screen.DOF=Depth of field")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# screen.DOF.comment=Depth of field effect. Adds blur to out of focus objects.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# screen.WAVING=Waving grass and leaves")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# screen.WAVING.comment=Waving grass, leaves, fire and entities")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Custom uniforms")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Define custom variables and uniforms using general mathematical expressions with brackets, ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# constants, variables, operators and functions.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The uniforms are sent to the shaders, the variables can be used in other variables or uniforms.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The custom uniforms are updated on program change.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Constants")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   floating point number")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   pi - 3.1415926")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   true")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   false")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The available biome ids, categories and precipitation types are defines as constants. ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# For example: BIOME_PLAINS, BIOME_DESERT, BIOME_EXTREME_HILLS, etc. ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Parameters (float)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   biome                - biome id")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   biome_category       - 0 to 16 (CAT_NONE, CAT_TAIGA, CAT_EXTREME_HILLS, CAT_JUNGLE, CAT_MESA, CAT_PLAINS, CAT_SAVANNA, CAT_ICY, ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#                          CAT_THE_END, CAT_BEACH, CAT_FOREST, CAT_OCEAN, CAT_DESERT, CAT_RIVER, CAT_SWAMP, CAT_MUSHROOM, CAT_NETHER)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   biome_precipitation  - 0 to 2 (PPT_NONE, PPT_RAIN, PPT_SNOW)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   temperature          - 0.0 to 1.0")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   rainfall             - 0.0 to 1.0 (humidity)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# Rain/snow is rendered for "biome_precipitation != PPT_NONE". If "temperature >= 0.15" rain is rendered, otherwise snow. ')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The fixed scalar uniforms are also available as parameters. For example: heldItemId, worldTime, moonPhase, etc.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# Vector elements can be accessed with suffix ".x", ".y" and ".z". For example: "sunPosition.y". ')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# Color elements can be accessed with suffix ".r", ".g" and ".b". For example: "skyColor.r".')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# Matrix elements can be accessed by row and column index. For example "gbufferModelView.0.1".')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The dynamic uniforms entityColor, entityId, blockEntityId, fogMode and fogColor can not be used as parameters ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# as they may change many times per program. ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Parameters (boolean)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   is_alive")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   is_burning")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   is_child")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   is_glowing")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   is_hurt")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   is_in_lava")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   is_in_water")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   is_invisible")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   is_on_ground")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   is_ridden")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   is_riding")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   is_sneaking")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   is_sprinting")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   is_wet")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Operators")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   +, -, *, /, %")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   !, &&, || ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   >, >=, <, <=, ==, !=")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Functions")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   sin(x)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   cos(x)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   asin(x)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   acos(x)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   tan(x)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   atan(x)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   atan2(y, x)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   torad(deg)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   todeg(rad)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   min(x, y ,...)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   max(x, y, ...)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   clamp(x, min, max)                             Limits a value to be between min and max values")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   abs(x)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   floor(x)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   ceil(x)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   exp(x)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   frac(x)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   log(x)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   pow(x)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   random()")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   round(x)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   signum(x)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   sqrt(x)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   fmod(x, y)                                     Similar to Math.floorMod()")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   if(cond, val, [cond2, val2, ...], val_else)    Select a value based one or more conditions")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   smooth([id], val, [fadeInTime, [fadeOutTime]]) Smooths a variable with custom fade-in time. ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#                                                  The "id" must be unique, if not specified it is generated automatically  ')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#                                                  Default fade time is 1 sec.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Boolean functions                 ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   between(x, min, max)                           Check if a value is between min and max values")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   equals(x, y, epsilon)                          Compare two float values with error margin")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   in(x, val1, val2, ...)                         Check if a value equals one of several values")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Vector functions")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   vec2(x, y)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   vec3(x, y, z) ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   vec4(x, y, z, w)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Example:")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   variable.bool.isBiomeDark=in(biome, BIOME_RIVER, BIOME_FOREST)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   variable.float.valBiomeDark=smooth(1, if(isBiomeDark, 1, 0), 5)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   variable.float.valHurtDark=smooth(2, if(is_hurt, 1.3, 0), 0, 10)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   variable.float.valSwordDark=smooth(3, if(heldItemId == 276, 1, 0), 0.5, 0.5)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   uniform.float.screenDark=max(valBiomeDark, valHurtDark, valSwordDark)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   uniform.vec3.screenDark3=vec3(screenDark, heldItemId, biome)")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("uniform.<float|int|bool|vec2|vec3|vec4>.<name>")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("<expression>")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("variable.<float|int|bool|vec2|vec3|vec4>.<name>")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("<expression>")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Alpha test")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The alpha test can be configured per program.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Where ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  - func is one of: NEVER, LESS, EQUAL, LEQUAL, GREATER, NOTEQUAL, GEQUAL, GL_ALWAYS")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#  - ref - float value")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("alphaTest.<program>")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("<off|func ref>")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Blend mode")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The blend mode can be configured per program.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Where src, dst, srcA and dstA are one of: ZERO, ONE, SRC_COLOR, ONE_MINUS_SRC_COLOR, DST_COLOR, ONE_MINUS_DST_COLOR, ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# SRC_ALPHA, ONE_MINUS_SRC_ALPHA, DST_ALPHA, ONE_MINUS_DST_ALPHA, SRC_ALPHA_SATURATE")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("blend.<program>")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("<off|src dst srcA dstA>")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Blend mode per buffer")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The blend mode can be configured per program and buffer")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Where src, dst, srcA and dstA are one of: ZERO, ONE, SRC_COLOR, ONE_MINUS_SRC_COLOR, DST_COLOR, ONE_MINUS_DST_COLOR, ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# SRC_ALPHA, ONE_MINUS_SRC_ALPHA, DST_ALPHA, ONE_MINUS_DST_ALPHA, SRC_ALPHA_SATURATE")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("blend.<program>.<buffer>")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("<off|src dst srcA dstA>")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Composite render scale")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Defines a custom viewport to be used when rendering composite and deferred programs.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The scale, offsetX and offsetY should be between 0.0 and 1.0.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("scale.<program>")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("<scale|scale offsetX ofsetY>")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Ping-pong buffer flip")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Enable or disable ping-pong buffer flip for a specific buffer name in a specific composite or deferred program.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# When buffer flip is disabled the next composite program will use the same input and output buffers for this buffer name.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The last program that writes to the buffer should have flip enabled so that the following programs can read from the buffer.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# This can be used with composite render scale to allow several composite programs to write to different regions in the same buffer.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Forced buffer flip can be used to read from both ping-pong buffers.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("flip.<program>.<buffer>")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("<true|false>")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Buffer size")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Define custom fixed size for a specific buffer.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Only prepare, deferred and composite programs can render to fixed size buffers.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Rendering to fixed size and normal buffers at the same time is not possible.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# When rendering to several fixed size buffers all of them must have the same size.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# When width and height are floating point values, then the buffer size will be relative to the render size.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# For example "size.buffer.colortex2=0.5 0.5" will create the buffer with widht and height half of the render width and height.')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("size.buffer.<buffer>")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("width height")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Enable or disable programs depending on shader options")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Disabled progams are processed as not defined and instead their fallback programs will be used.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The program name can contain dimension folder, for example:")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   program.world-1/composite2.enabled=BLOOM")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The expression is a boolean expression which can use shader options of type switch (on/off), for example:")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   program.composite.enabled=(BLOOM || SSAO) && !GODRAYS")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("program.<program>.enabled")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[e._v("<expression>")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# Shaders can be separated by world dimension by placing them in folder "/shaders/world<id>" where "id" is the world dimension.')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# When the world folder is present the shaders will be loaded only from there ignoring the default folder.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Creating an empty world folder effectively disables the shaders for this world dimension.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Mod world dimensions should also work.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# Only ".vsh" and ".fsh" files are loaded from the dimension folder.')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Example")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   /shaders         - default shaders")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   /shaders/world-1 - nether shaders")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   /shaders/world1  - end shaders")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Dimension folders are also scanned for options.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The options in dimension foldes may be given different names to avoid conflict with default values.")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# The "#include" directive found in ".vsh" and ".fsh" files is replaced with the contents of the included file')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Relative, look in same folder")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#   #include "const.inc"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# Absolute, start from base folder "/shaders"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#   #include "/world-55/lib.inc"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Included files may include other files.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The maximum include depth is limited to 10.")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# To avoid code duplication on nested includes the following can be used:")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   // File A")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   #ifndef INCLUDE_A")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   #define INCLUDE_A")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   ... <code>")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#   #endif")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# When Minecraft is started with argument "-Dshaders.debug.save=true" then the final shaders will be saved in "shaderpacks/debug".')]),e._v("\n")])])])],1)}),[],!1,null,null,null);t.default=a.exports}}]);